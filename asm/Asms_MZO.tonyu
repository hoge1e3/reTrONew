extends TObject;
let data;
nowait function init(){
    data={'z_mzo':`;!RAM
MZO_FLD.gbl_ch1:
dw MZO.ch1
MZO_FLD.gbl_ch2:
dw MZO.ch2
MZO_FLD.gbl_ch3:
dw MZO.ch3
MZO_FLD.gbl_chs:
dw MZO.chs
MZO_FLD.gbl_PSGs:
dw MZO.PSGs
MZOCmd:
#local
cp 0
jp z,initMZOs
cp 1
jp z,playBGM
cp 2
jp z,playSE
cp 3
jp z,stopBGM
cp 4
jp step
;range 0-20
;trace mesg
 call h.unreach
 dw RActor
PSG:
; MZO_FLD.class equ 250
 ld bc,PSG
 push bc
; MZO_FLD.main equ 248
 ld bc,PSG.main
 push bc
 ld bc,0
 push bc
 ld bc,0
 push bc
 ld bc,0
 push bc
 ld bc,0
 push bc
; MZO_FLD.onUpdate equ 238
 ld bc,RActor.onUpdate
 push bc
; MZO_FLD.update equ 236
 ld bc,RActor.update
 push bc
; MZO_FLD.screenOut equ 234
 ld bc,RActor.screenOut
 push bc
; MZO_FLD.die equ 232
 ld bc,RActor.die
 push bc
; MZO_FLD.updateEx equ 230
 ld bc,RActor.updateEx
 push bc
; MZO_FLD.crashTo equ 228
 ld bc,RActor.crashTo
 push bc
MZO_FLD.mpoint equ 22
 ld bc,0
 push bc
MZO_FLD.v equ 20
 ld bc,0
 push bc
MZO_FLD.chn equ 18
 ld bc,0
 push bc
MZO_FLD.mcount equ 16
 ld bc,0
 push bc
MZO_FLD.len equ 14
 ld bc,0
 push bc
MZO_FLD.tempoc equ 12
 ld bc,0
 push bc
MZO_FLD.mute equ 10
 ld bc,0
 push bc
MZO_FLD.cmd equ 8
 ld bc,0
 push bc
MZO_FLD.init equ 6
 ld bc,PSG.init
 push bc
MZO_FLD.stop equ 4
 ld bc,PSG.stop
 push bc
MZO_FLD.step equ 2
 ld bc,PSG.step
 push bc
MZO_FLD.read16 equ 0
 ld bc,PSG.read16
 push bc
 ld bc,RActor.wait
 push bc
 ld bc,o.boot
 push bc
 jp th.ewith
;trace mesg
 call h.unreach
PSG.main:
;  arg2 arg1 retad oldix lcl1 lcl2
 push ix
 ld ix,0
 add ix,sp
;var mpoint
;var v
;var chn
;var mcount
;var len
;var tempoc
;var mute
;var cmd
L79.lbexit:
 ld sp,ix
 pop ix
 ret
;trace mesg
 call h.unreach
PSG.init:
;  arg2 arg1 retad oldix lcl1 lcl2
 push ix
 ld ix,0
 add ix,sp
;len=20160/2;
 ld hl,10080; const val
 ld ($+5),a
 ld (MZO_FLD.len),hl
;mcount=0;
 ld hl,0; const val
 ld ($+5),a
 ld (MZO_FLD.mcount),hl
;tempoc=336;
 ld hl,336; const val
 ld ($+5),a
 ld (MZO_FLD.tempoc),hl
;mute=0;
 ld hl,0; const val
 ld ($+5),a
 ld (MZO_FLD.mute),hl
;mpoint=mp;
 ld l,(ix+argidx+1*2)
 ld h,(ix+argidx+1*2+1)
 ld ($+5),a
 ld (MZO_FLD.mpoint),hl
L80.lbexit:
 ld sp,ix
 pop ix
  exx
  pop bc
  inc sp
  inc sp
  push bc
  exx
 ret
;trace mesg
 call h.unreach
PSG.stop:
;  arg2 arg1 retad oldix lcl1 lcl2
 push ix
 ld ix,0
 add ix,sp
;mpoint=0;
 ld hl,0; const val
 ld ($+5),a
 ld (MZO_FLD.mpoint),hl
;if !mute
 ld ($+5),a
 ld hl,(MZO_FLD.mute)
 call nothl
;then
 call ziffalse
 jp z,L81.lb4
;sound_vol(chn,0);
 ld hl,0; const val
 ld e,l
 push de
 ld ($+5),a
 ld hl,(MZO_FLD.chn)
 ld a,l
 pop de
 add a,8
 call WRTPSG
 ld a,(this)
L81.lb4:
L81.lbexit:
 ld sp,ix
 pop ix
 ret
;trace mesg
 call h.unreach
PSG.step:
;  arg2 arg1 retad oldix lcl1 lcl2
 push ix
 ld ix,0
 add ix,sp
  push HL
;if !mpoint
 ld ($+5),a
 ld hl,(MZO_FLD.mpoint)
 call nothl
;then
 call ziffalse
 jp z,L82.lb5
;return return;
 jp L82.lbexit
L82.lb5:
;if !mute
 ld ($+5),a
 ld hl,(MZO_FLD.mute)
 call nothl
;then
 call ziffalse
 jp z,L82.lb6
;sound_vol(chn,v);
 ld ($+5),a
 ld hl,(MZO_FLD.v)
 ld e,l
 push de
 ld ($+5),a
 ld hl,(MZO_FLD.chn)
 ld a,l
 pop de
 add a,8
 call WRTPSG
 ld a,(this)
L82.lb6:
;mcount-=tempoc;
 ld ($+5),a
 ld hl,(MZO_FLD.mcount)
 ld ($+6),a
 ld de,(MZO_FLD.tempoc)
 and a
 sbc hl,de
 ld ($+5),a
 ld (MZO_FLD.mcount),hl
;if v>0
 ld hl,0; const val
 push hl
 ld ($+5),a
 ld hl,(MZO_FLD.v)
 pop de
 call hlgtde
;then
 call ziffalse
 jp z,L82.lb7
;v--;
 ld ($+5),a
 ld hl,(MZO_FLD.v)
 dec hl
 ld ($+5),a
 ld (MZO_FLD.v),hl
L82.lb7:
L82.lb8:
;while mcount>=-tempoc && mcount<=0
 ld ($+5),a
 ld hl,(MZO_FLD.tempoc)
 call neghl
 push hl
 ld ($+5),a
 ld hl,(MZO_FLD.mcount)
 pop de
 call hlgede
 call ziffalse
 jp z,L82.lb10
 ld hl,0; const val
 push hl
 ld ($+5),a
 ld hl,(MZO_FLD.mcount)
 pop de
 call hllede
L82.lb10:
 call ziffalse
 jp z,L82.lb9
;cmd=peek(mpoint);
 ld ($+5),a
 ld hl,(MZO_FLD.mpoint)
  ld (L83.w-2),hl
  ld hl,(0)
L83.w:
 ld h,0
 ld ($+5),a
 ld (MZO_FLD.cmd),hl
;if cmd>=0 && cmd<96
 ld hl,0; const val
 push hl
 ld ($+5),a
 ld hl,(MZO_FLD.cmd)
 pop de
 call hlgede
 call ziffalse
 jp z,L82.lb12
 ld hl,96; const val
 push hl
 ld ($+5),a
 ld hl,(MZO_FLD.cmd)
 pop de
 call hlltde
L82.lb12:
;then
 call ziffalse
 jp z,L82.lb11
;if !mute
 ld ($+5),a
 ld hl,(MZO_FLD.mute)
 call nothl
;then
 call ziffalse
 jp z,L82.lb13
;sound_scale(chn,cmd);
 ld ($+5),a
 ld hl,(MZO_FLD.cmd)
 push hl
 ld ($+5),a
 ld hl,(MZO_FLD.chn)
 ld a,l
 pop hl
 call mus.scale.a
 ld a,(this)
L82.lb13:
;v=12;
 ld hl,12; const val
 ld ($+5),a
 ld (MZO_FLD.v),hl
;mpoint++;
 ld ($+5),a
 ld hl,(MZO_FLD.mpoint)
 inc hl
 ld ($+5),a
 ld (MZO_FLD.mpoint),hl
;if peek(mpoint)==123
 ld hl,123; const val
 push hl
 ld ($+5),a
 ld hl,(MZO_FLD.mpoint)
  ld (L84.w-2),hl
  ld hl,(0)
L84.w:
 ld h,0
 pop de
 call hleqde
;then
 call ziffalse
 jp z,L82.lb15
;mpoint++;
 ld ($+5),a
 ld hl,(MZO_FLD.mpoint)
 inc hl
 ld ($+5),a
 ld (MZO_FLD.mpoint),hl
;mcount+=read16();
 call PSG.read16
 ld a,(this)
 push hl
 ld ($+5),a
 ld hl,(MZO_FLD.mcount)
 pop de
 add hl, de
 ld ($+5),a
 ld (MZO_FLD.mcount),hl
;mpoint+=2;
 ld ($+5),a
 ld hl,(MZO_FLD.mpoint)
 ld de,2; const val
 add hl, de
 ld ($+5),a
 ld (MZO_FLD.mpoint),hl
 jp L82.lb14
L82.lb15:;else
;mcount+=len;
 ld ($+5),a
 ld hl,(MZO_FLD.mcount)
 ld ($+6),a
 ld de,(MZO_FLD.len)
 add hl, de
 ld ($+5),a
 ld (MZO_FLD.mcount),hl
L82.lb14:
 jp L82.lb9
L82.lb11:
;switch cmd
 ld ($+5),a
 ld hl,(MZO_FLD.cmd)
 ld de,99; const val
 rst dcompr
 jp z,L82.lb160
 ld de,124; const val
 rst dcompr
 jp z,L82.lb161
 ld de,104; const val
 rst dcompr
 jp z,L82.lb162
 ld de,255; const val
 rst dcompr
 jp z,L82.lb163
 ld de,100; const val
 rst dcompr
 jp z,L82.lb164
 ld de,101; const val
 rst dcompr
 jp z,L82.lb165
 ld de,102; const val
 rst dcompr
 jp z,L82.lb166
 ld de,103; const val
 rst dcompr
 jp z,L82.lb167
 ld de,107; const val
 rst dcompr
 jp z,L82.lb168
 ld de,110; const val
 rst dcompr
 jp z,L82.lb169
 ld de,115; const val
 rst dcompr
 jp z,L82.lb1610
 ld de,116; const val
 rst dcompr
 jp z,L82.lb1611
 ld de,118; const val
 rst dcompr
 jp z,L82.lb1612
 ld de,120; const val
 rst dcompr
 jp z,L82.lb1613
 ld de,122; const val
 rst dcompr
 jp z,L82.lb1614
 ld a,(this)
 jp L82.lb16def
L82.lb160:
 ld a,(this)
;case 99
;v=0;
 ld hl,0; const val
 ld ($+5),a
 ld (MZO_FLD.v),hl
;mpoint++;
 ld ($+5),a
 ld hl,(MZO_FLD.mpoint)
 inc hl
 ld ($+5),a
 ld (MZO_FLD.mpoint),hl
;if peek(mpoint)==123
 ld hl,123; const val
 push hl
 ld ($+5),a
 ld hl,(MZO_FLD.mpoint)
  ld (L85.w-2),hl
  ld hl,(0)
L85.w:
 ld h,0
 pop de
 call hleqde
;then
 call ziffalse
 jp z,L82.lb18
;mpoint++;
 ld ($+5),a
 ld hl,(MZO_FLD.mpoint)
 inc hl
 ld ($+5),a
 ld (MZO_FLD.mpoint),hl
;mcount+=read16();
 call PSG.read16
 ld a,(this)
 push hl
 ld ($+5),a
 ld hl,(MZO_FLD.mcount)
 pop de
 add hl, de
 ld ($+5),a
 ld (MZO_FLD.mcount),hl
;mpoint+=2;
 ld ($+5),a
 ld hl,(MZO_FLD.mpoint)
 ld de,2; const val
 add hl, de
 ld ($+5),a
 ld (MZO_FLD.mpoint),hl
 jp L82.lb17
L82.lb18:;else
;mcount+=len;
 ld ($+5),a
 ld hl,(MZO_FLD.mcount)
 ld ($+6),a
 ld de,(MZO_FLD.len)
 add hl, de
 ld ($+5),a
 ld (MZO_FLD.mcount),hl
L82.lb17:
 jp L82.lb16brk
L82.lb161:
 ld a,(this)
;case 124
;v=0;
 ld hl,0; const val
 ld ($+5),a
 ld (MZO_FLD.v),hl
;mpoint++;
 ld ($+5),a
 ld hl,(MZO_FLD.mpoint)
 inc hl
 ld ($+5),a
 ld (MZO_FLD.mpoint),hl
 jp L82.lb16brk
L82.lb162:
 ld a,(this)
;case 104
;mpoint++;
 ld ($+5),a
 ld hl,(MZO_FLD.mpoint)
 inc hl
 ld ($+5),a
 ld (MZO_FLD.mpoint),hl
;var ofs=read16()
 call PSG.read16
 ld a,(this)
 ld (ix-(1*2-1)),h
 ld (ix-1*2),l
;mpoint--;
 ld ($+5),a
 ld hl,(MZO_FLD.mpoint)
 dec hl
 ld ($+5),a
 ld (MZO_FLD.mpoint),hl
;mpoint+=ofs-65536;
 ld h,(ix-(1*2-1))
 ld l,(ix-1*2)
 ld de,0; const val
 and a
 sbc hl,de
 push hl
 ld ($+5),a
 ld hl,(MZO_FLD.mpoint)
 pop de
 add hl, de
 ld ($+5),a
 ld (MZO_FLD.mpoint),hl
 jp L82.lb16brk
L82.lb163:
 ld a,(this)
;case 255
;stop();
 call PSG.stop
 ld a,(this)
;mcount=1;
 ld hl,1; const val
 ld ($+5),a
 ld (MZO_FLD.mcount),hl
 jp L82.lb16brk
L82.lb164:
 ld a,(this)
;case 100
;mpoint+=2;
 ld ($+5),a
 ld hl,(MZO_FLD.mpoint)
 ld de,2; const val
 add hl, de
 ld ($+5),a
 ld (MZO_FLD.mpoint),hl
 jp L82.lb16brk
L82.lb165:
 ld a,(this)
;case 101
;mpoint+=2;
 ld ($+5),a
 ld hl,(MZO_FLD.mpoint)
 ld de,2; const val
 add hl, de
 ld ($+5),a
 ld (MZO_FLD.mpoint),hl
 jp L82.lb16brk
 jp L82.lb16brk
L82.lb166:
 ld a,(this)
;case 102
;mpoint+=2;
 ld ($+5),a
 ld hl,(MZO_FLD.mpoint)
 ld de,2; const val
 add hl, de
 ld ($+5),a
 ld (MZO_FLD.mpoint),hl
 jp L82.lb16brk
L82.lb167:
 ld a,(this)
;case 103
;tempoc=read16()*168/60;
 call PSG.read16
 ld a,(this)
 ld de,168; const val
 call mul.a
 ld a,(this)
 ld de,60; const val
 call div.a
 ld a,(this)
 ld ($+5),a
 ld (MZO_FLD.tempoc),hl
;mpoint+=3;
 ld ($+5),a
 ld hl,(MZO_FLD.mpoint)
 ld de,3; const val
 add hl, de
 ld ($+5),a
 ld (MZO_FLD.mpoint),hl
 jp L82.lb16brk
L82.lb168:
 ld a,(this)
;case 107
;mpoint+=2;
 ld ($+5),a
 ld hl,(MZO_FLD.mpoint)
 ld de,2; const val
 add hl, de
 ld ($+5),a
 ld (MZO_FLD.mpoint),hl
 jp L82.lb16brk
L82.lb169:
 ld a,(this)
;case 110
;mpoint+=2;
 ld ($+5),a
 ld hl,(MZO_FLD.mpoint)
 ld de,2; const val
 add hl, de
 ld ($+5),a
 ld (MZO_FLD.mpoint),hl
 jp L82.lb16brk
L82.lb1610:
 ld a,(this)
;case 115
;mpoint+=4;
 ld ($+5),a
 ld hl,(MZO_FLD.mpoint)
 ld de,4; const val
 add hl, de
 ld ($+5),a
 ld (MZO_FLD.mpoint),hl
 jp L82.lb16brk
L82.lb1611:
 ld a,(this)
;case 116
;mpoint+=2;
 ld ($+5),a
 ld hl,(MZO_FLD.mpoint)
 ld de,2; const val
 add hl, de
 ld ($+5),a
 ld (MZO_FLD.mpoint),hl
 jp L82.lb16brk
L82.lb1612:
 ld a,(this)
;case 118
;mpoint+=2;
 ld ($+5),a
 ld hl,(MZO_FLD.mpoint)
 ld de,2; const val
 add hl, de
 ld ($+5),a
 ld (MZO_FLD.mpoint),hl
 jp L82.lb16brk
L82.lb1613:
 ld a,(this)
;case 120
;mpoint+=2;
 ld ($+5),a
 ld hl,(MZO_FLD.mpoint)
 ld de,2; const val
 add hl, de
 ld ($+5),a
 ld (MZO_FLD.mpoint),hl
 jp L82.lb16brk
L82.lb1614:
 ld a,(this)
;case 122
;mpoint++;
 ld ($+5),a
 ld hl,(MZO_FLD.mpoint)
 inc hl
 ld ($+5),a
 ld (MZO_FLD.mpoint),hl
;len=read16();
 call PSG.read16
 ld a,(this)
 ld ($+5),a
 ld (MZO_FLD.len),hl
;locate(0,3+chn);
 ld hl,3; const val
 ld ($+6),a
 ld de,(MZO_FLD.chn)
 add hl, de
 push hl
 ld hl,0; const val
 pop de
 call locate
;mpoint+=2;
 ld ($+5),a
 ld hl,(MZO_FLD.mpoint)
 ld de,2; const val
 add hl, de
 ld ($+5),a
 ld (MZO_FLD.mpoint),hl
 jp L82.lb16brk
L82.lb16def:
;locate(0,6);
 ld hl,6; const val
 push hl
 ld hl,0; const val
 pop de
 call locate
;printf ("Inv %d %x" ,cmd, mpoint);
 ld hl,L86.st
 jp L86.nx
L86.st: db 73, 110, 118, 32
 db 0
L86.nx:
 call print.a
 ld a,(this)
 ld ($+5),a
 ld hl,(MZO_FLD.cmd)
 call printi.a
 ld a,(this)
 ld hl,L87.st
 jp L87.nx
L87.st: db 32
 db 0
L87.nx:
 call print.a
 ld a,(this)
 ld ($+5),a
 ld hl,(MZO_FLD.mpoint)
 ld (hexval),hl
 call showhex
 ld a,(this)
;stop();
 call PSG.stop
 ld a,(this)
;mcount=1;
 ld hl,1; const val
 ld ($+5),a
 ld (MZO_FLD.mcount),hl
 jp L82.lb16brk
L82.lb16brk:
 jp L82.lb8
L82.lb9:
L82.lbexit:
 ld sp,ix
 pop ix
 ret
;trace mesg
 call h.unreach
PSG.read16:
;  arg2 arg1 retad oldix lcl1 lcl2
 push ix
 ld ix,0
 add ix,sp
;return return peek(mpoint)+(peek(mpoint+1)<<8);
 ld hl,8; const val
 push hl
 ld ($+5),a
 ld hl,(MZO_FLD.mpoint)
 ld de,1; const val
 add hl, de
  ld (L89.w-2),hl
  ld hl,(0)
L89.w:
 ld h,0
 pop bc
 ld b,c
L90.loop:
 sla l
 rl h
  djnz L90.loop
 push hl
 ld ($+5),a
 ld hl,(MZO_FLD.mpoint)
  ld (L91.w-2),hl
  ld hl,(0)
L91.w:
 ld h,0
 pop de
 add hl, de
 jp L88.lbexit
L88.lbexit:
 ld sp,ix
 pop ix
 ret
;range 0-20
;trace mesg
 call h.unreach
 dw RActor
PSGs:
; MZO_FLD.class equ 250
 ld bc,PSGs
 push bc
; MZO_FLD.main equ 248
 ld bc,PSGs.main
 push bc
 ld bc,0
 push bc
 ld bc,0
 push bc
 ld bc,0
 push bc
 ld bc,0
 push bc
; MZO_FLD.onUpdate equ 238
 ld bc,RActor.onUpdate
 push bc
; MZO_FLD.update equ 236
 ld bc,RActor.update
 push bc
; MZO_FLD.screenOut equ 234
 ld bc,RActor.screenOut
 push bc
; MZO_FLD.die equ 232
 ld bc,RActor.die
 push bc
; MZO_FLD.updateEx equ 230
 ld bc,RActor.updateEx
 push bc
; MZO_FLD.crashTo equ 228
 ld bc,RActor.crashTo
 push bc
MZO_FLD.ch1 equ 22
 ld bc,0
 push bc
MZO_FLD.ch2 equ 20
 ld bc,0
 push bc
MZO_FLD.ch3 equ 18
 ld bc,0
 push bc
MZO_FLD.chs equ 16
 ld bc,0
 push bc
MZO_FLD.initBGM equ 14
 ld bc,PSGs.initBGM
 push bc
MZO_FLD.initSE equ 12
 ld bc,PSGs.initSE
 push bc
MZO_FLD.stopBGM equ 10
 ld bc,PSGs.stopBGM
 push bc
MZO_FLD._step equ 8
 ld bc,PSGs._step
 push bc
; MZO_FLD.init equ 210
 ld bc,PSGs.init
 push bc
 ld bc,0
 push bc
; MZO_FLD.step equ 206
 ld bc,PSGs.step
 push bc
; MZO_FLD.read16 equ 204
 ld bc,PSGs.read16
 push bc
 ld bc,RActor.wait
 push bc
 ld bc,o.boot
 push bc
 jp th.ewith
;trace mesg
 call h.unreach
PSGs.main:
;  arg2 arg1 retad oldix lcl1 lcl2
 push ix
 ld ix,0
 add ix,sp
;var ch1
;var ch2
;var ch3
;var chs
L92.lbexit:
 ld sp,ix
 pop ix
 ret
;trace mesg
 call h.unreach
PSGs.init:
;  arg2 arg1 retad oldix lcl1 lcl2
 push ix
 ld ix,0
 add ix,sp
;ch1=$ch1 || new PSG{chn:0};
 ld hl,(MZO_FLD.gbl_ch1)
 call ziffalse
 jp nz,L93.lb19
 ld hl,0; const val
 push hl
 ld bc,MZO_FLD.chn
 push bc
 ld bc,th.start+0*th.size
 ld(th.new.start),bc
 ld bc,th.start+20*th.size
 ld(th.new.end),bc
 ld bc,1
 push bc
 ld bc,PSG
 push bc
 call o.new
L93.lb19:
 ld ($+5),a
 ld (MZO_FLD.ch1),hl
;ch1.init(0);
 ld a,(this)
 push af
 ld hl,0; const val
 push hl
 ld ($+5),a
 ld hl,(MZO_FLD.ch1)
 ld a,h
 ld (this),a
 ld ($+5),a
 ld hl,(MZO_FLD.init)
 push hl
 ld hl,$+5
 ex (sp),hl
 jp (hl); call hl
  ex (sp),hl
  ld a,h
  pop HL
 ld (this),a
;ch1.chn=0;
 ld hl,0; const val
 push hl
 ld ($+5),a
 ld hl,(MZO_FLD.ch1)
; stk=val hl=tg
 ld l,MZO_FLD.chn
 pop de
  ld (L94.w-2),hl
  ld (0),de
L94.w:
;ch2=$ch2 || new PSG{chn:1};
 ld hl,(MZO_FLD.gbl_ch2)
 call ziffalse
 jp nz,L93.lb20
 ld hl,1; const val
 push hl
 ld bc,MZO_FLD.chn
 push bc
 ld bc,th.start+0*th.size
 ld(th.new.start),bc
 ld bc,th.start+20*th.size
 ld(th.new.end),bc
 ld bc,1
 push bc
 ld bc,PSG
 push bc
 call o.new
L93.lb20:
 ld ($+5),a
 ld (MZO_FLD.ch2),hl
;ch2.init(0);
 ld a,(this)
 push af
 ld hl,0; const val
 push hl
 ld ($+5),a
 ld hl,(MZO_FLD.ch2)
 ld a,h
 ld (this),a
 ld ($+5),a
 ld hl,(MZO_FLD.init)
 push hl
 ld hl,$+5
 ex (sp),hl
 jp (hl); call hl
  ex (sp),hl
  ld a,h
  pop HL
 ld (this),a
;ch2.chn=1;
 ld hl,1; const val
 push hl
 ld ($+5),a
 ld hl,(MZO_FLD.ch2)
; stk=val hl=tg
 ld l,MZO_FLD.chn
 pop de
  ld (L95.w-2),hl
  ld (0),de
L95.w:
;ch3=$ch3 || new PSG{chn:2};
 ld hl,(MZO_FLD.gbl_ch3)
 call ziffalse
 jp nz,L93.lb21
 ld hl,2; const val
 push hl
 ld bc,MZO_FLD.chn
 push bc
 ld bc,th.start+0*th.size
 ld(th.new.start),bc
 ld bc,th.start+20*th.size
 ld(th.new.end),bc
 ld bc,1
 push bc
 ld bc,PSG
 push bc
 call o.new
L93.lb21:
 ld ($+5),a
 ld (MZO_FLD.ch3),hl
;ch3.init(0);
 ld a,(this)
 push af
 ld hl,0; const val
 push hl
 ld ($+5),a
 ld hl,(MZO_FLD.ch3)
 ld a,h
 ld (this),a
 ld ($+5),a
 ld hl,(MZO_FLD.init)
 push hl
 ld hl,$+5
 ex (sp),hl
 jp (hl); call hl
  ex (sp),hl
  ld a,h
  pop HL
 ld (this),a
;ch3.chn=2;
 ld hl,2; const val
 push hl
 ld ($+5),a
 ld hl,(MZO_FLD.ch3)
; stk=val hl=tg
 ld l,MZO_FLD.chn
 pop de
  ld (L96.w-2),hl
  ld (0),de
L96.w:
;chs=$chs || new PSG{chn:2};
 ld hl,(MZO_FLD.gbl_chs)
 call ziffalse
 jp nz,L93.lb22
 ld hl,2; const val
 push hl
 ld bc,MZO_FLD.chn
 push bc
 ld bc,th.start+0*th.size
 ld(th.new.start),bc
 ld bc,th.start+20*th.size
 ld(th.new.end),bc
 ld bc,1
 push bc
 ld bc,PSG
 push bc
 call o.new
L93.lb22:
 ld ($+5),a
 ld (MZO_FLD.chs),hl
;chs.init(0);
 ld a,(this)
 push af
 ld hl,0; const val
 push hl
 ld ($+5),a
 ld hl,(MZO_FLD.chs)
 ld a,h
 ld (this),a
 ld ($+5),a
 ld hl,(MZO_FLD.init)
 push hl
 ld hl,$+5
 ex (sp),hl
 jp (hl); call hl
  ex (sp),hl
  ld a,h
  pop HL
 ld (this),a
;chs.chn=2;
 ld hl,2; const val
 push hl
 ld ($+5),a
 ld hl,(MZO_FLD.chs)
; stk=val hl=tg
 ld l,MZO_FLD.chn
 pop de
  ld (L97.w-2),hl
  ld (0),de
L97.w:
;setInterval(_step);
 ld ($+5),a
 ld hl,(MZO_FLD._step)
 call setInterval
L93.lbexit:
 ld sp,ix
 pop ix
 ret
;trace mesg
 call h.unreach
PSGs.initBGM:
;  arg2 arg1 retad oldix lcl1 lcl2
 push ix
 ld ix,0
 add ix,sp
  push HL
;mpoint+=4;
 ld l,(ix+argidx+1*2)
 ld h,(ix+argidx+1*2+1)
 ld de,4; const val
 add hl, de
 ld (ix+argidx+1*2),l
 ld (ix+argidx+1*2+1),h
;mpoint++;
 ld l,(ix+argidx+1*2)
 ld h,(ix+argidx+1*2+1)
 inc hl
 ld (ix+argidx+1*2),l
 ld (ix+argidx+1*2+1),h
;var size
;size=read16(mpoint);
 ld l,(ix+argidx+1*2)
 ld h,(ix+argidx+1*2+1)
 push hl
 call PSGs.read16
 ld a,(this)
 ld (ix-(1*2-1)),h
 ld (ix-1*2),l
;mpoint+=4;
 ld l,(ix+argidx+1*2)
 ld h,(ix+argidx+1*2+1)
 ld de,4; const val
 add hl, de
 ld (ix+argidx+1*2),l
 ld (ix+argidx+1*2+1),h
;ch1.init(mpoint);
 ld a,(this)
 push af
 ld l,(ix+argidx+1*2)
 ld h,(ix+argidx+1*2+1)
 push hl
 ld ($+5),a
 ld hl,(MZO_FLD.ch1)
 ld a,h
 ld (this),a
 ld ($+5),a
 ld hl,(MZO_FLD.init)
 push hl
 ld hl,$+5
 ex (sp),hl
 jp (hl); call hl
  ex (sp),hl
  ld a,h
  pop HL
 ld (this),a
;mpoint+=size;
 ld l,(ix+argidx+1*2)
 ld h,(ix+argidx+1*2+1)
 ld d,(ix-(1*2-1))
 ld e,(ix-1*2)
 add hl, de
 ld (ix+argidx+1*2),l
 ld (ix+argidx+1*2+1),h
;size=read16(mpoint);
 ld l,(ix+argidx+1*2)
 ld h,(ix+argidx+1*2+1)
 push hl
 call PSGs.read16
 ld a,(this)
 ld (ix-(1*2-1)),h
 ld (ix-1*2),l
;mpoint+=4;
 ld l,(ix+argidx+1*2)
 ld h,(ix+argidx+1*2+1)
 ld de,4; const val
 add hl, de
 ld (ix+argidx+1*2),l
 ld (ix+argidx+1*2+1),h
;ch2.init(mpoint);
 ld a,(this)
 push af
 ld l,(ix+argidx+1*2)
 ld h,(ix+argidx+1*2+1)
 push hl
 ld ($+5),a
 ld hl,(MZO_FLD.ch2)
 ld a,h
 ld (this),a
 ld ($+5),a
 ld hl,(MZO_FLD.init)
 push hl
 ld hl,$+5
 ex (sp),hl
 jp (hl); call hl
  ex (sp),hl
  ld a,h
  pop HL
 ld (this),a
;mpoint+=size;
 ld l,(ix+argidx+1*2)
 ld h,(ix+argidx+1*2+1)
 ld d,(ix-(1*2-1))
 ld e,(ix-1*2)
 add hl, de
 ld (ix+argidx+1*2),l
 ld (ix+argidx+1*2+1),h
;size=read16(mpoint);
 ld l,(ix+argidx+1*2)
 ld h,(ix+argidx+1*2+1)
 push hl
 call PSGs.read16
 ld a,(this)
 ld (ix-(1*2-1)),h
 ld (ix-1*2),l
;mpoint+=4;
 ld l,(ix+argidx+1*2)
 ld h,(ix+argidx+1*2+1)
 ld de,4; const val
 add hl, de
 ld (ix+argidx+1*2),l
 ld (ix+argidx+1*2+1),h
;ch3.init(mpoint);
 ld a,(this)
 push af
 ld l,(ix+argidx+1*2)
 ld h,(ix+argidx+1*2+1)
 push hl
 ld ($+5),a
 ld hl,(MZO_FLD.ch3)
 ld a,h
 ld (this),a
 ld ($+5),a
 ld hl,(MZO_FLD.init)
 push hl
 ld hl,$+5
 ex (sp),hl
 jp (hl); call hl
  ex (sp),hl
  ld a,h
  pop HL
 ld (this),a
;mpoint+=size;
 ld l,(ix+argidx+1*2)
 ld h,(ix+argidx+1*2+1)
 ld d,(ix-(1*2-1))
 ld e,(ix-1*2)
 add hl, de
 ld (ix+argidx+1*2),l
 ld (ix+argidx+1*2+1),h
L98.lbexit:
 ld sp,ix
 pop ix
  exx
  pop bc
  inc sp
  inc sp
  push bc
  exx
 ret
;trace mesg
 call h.unreach
PSGs.initSE:
;  arg2 arg1 retad oldix lcl1 lcl2
 push ix
 ld ix,0
 add ix,sp
  push HL
;if chs.mpoint && chs.mpoint<mpoint
 ld ($+5),a
 ld hl,(MZO_FLD.chs)
;hl=tg
 ld l,MZO_FLD.mpoint
  ld (L100.w-2),hl
  ld hl,(0)
L100.w:
 call ziffalse
 jp z,L99.lb24
 ld l,(ix+argidx+1*2)
 ld h,(ix+argidx+1*2+1)
 push hl
 ld ($+5),a
 ld hl,(MZO_FLD.chs)
;hl=tg
 ld l,MZO_FLD.mpoint
  ld (L101.w-2),hl
  ld hl,(0)
L101.w:
 pop de
 call hlltde
L99.lb24:
;then
 call ziffalse
 jp z,L99.lb23
;return return;
 jp L99.lbexit
L99.lb23:
;mpoint+=4;
 ld l,(ix+argidx+1*2)
 ld h,(ix+argidx+1*2+1)
 ld de,4; const val
 add hl, de
 ld (ix+argidx+1*2),l
 ld (ix+argidx+1*2+1),h
;mpoint++;
 ld l,(ix+argidx+1*2)
 ld h,(ix+argidx+1*2+1)
 inc hl
 ld (ix+argidx+1*2),l
 ld (ix+argidx+1*2+1),h
;var size=read16(mpoint)
 ld l,(ix+argidx+1*2)
 ld h,(ix+argidx+1*2+1)
 push hl
 call PSGs.read16
 ld a,(this)
 ld (ix-(1*2-1)),h
 ld (ix-1*2),l
;mpoint+=4;
 ld l,(ix+argidx+1*2)
 ld h,(ix+argidx+1*2+1)
 ld de,4; const val
 add hl, de
 ld (ix+argidx+1*2),l
 ld (ix+argidx+1*2+1),h
;chs.init(mpoint);
 ld a,(this)
 push af
 ld l,(ix+argidx+1*2)
 ld h,(ix+argidx+1*2+1)
 push hl
 ld ($+5),a
 ld hl,(MZO_FLD.chs)
 ld a,h
 ld (this),a
 ld ($+5),a
 ld hl,(MZO_FLD.init)
 push hl
 ld hl,$+5
 ex (sp),hl
 jp (hl); call hl
  ex (sp),hl
  ld a,h
  pop HL
 ld (this),a
L99.lbexit:
 ld sp,ix
 pop ix
  exx
  pop bc
  inc sp
  inc sp
  push bc
  exx
 ret
;trace mesg
 call h.unreach
PSGs.stopBGM:
;  arg2 arg1 retad oldix lcl1 lcl2
 push ix
 ld ix,0
 add ix,sp
;ch1.stop();
 ld a,(this)
 push af
 ld ($+5),a
 ld hl,(MZO_FLD.ch1)
 ld a,h
 ld (this),a
 ld ($+5),a
 ld hl,(MZO_FLD.stop)
 push hl
 ld hl,$+5
 ex (sp),hl
 jp (hl); call hl
  ex (sp),hl
  ld a,h
  pop HL
 ld (this),a
;ch2.stop();
 ld a,(this)
 push af
 ld ($+5),a
 ld hl,(MZO_FLD.ch2)
 ld a,h
 ld (this),a
 ld ($+5),a
 ld hl,(MZO_FLD.stop)
 push hl
 ld hl,$+5
 ex (sp),hl
 jp (hl); call hl
  ex (sp),hl
  ld a,h
  pop HL
 ld (this),a
;ch3.stop();
 ld a,(this)
 push af
 ld ($+5),a
 ld hl,(MZO_FLD.ch3)
 ld a,h
 ld (this),a
 ld ($+5),a
 ld hl,(MZO_FLD.stop)
 push hl
 ld hl,$+5
 ex (sp),hl
 jp (hl); call hl
  ex (sp),hl
  ld a,h
  pop HL
 ld (this),a
L102.lbexit:
 ld sp,ix
 pop ix
 ret
;trace mesg
 call h.unreach
PSGs._step:
;  arg2 arg1 retad oldix lcl1 lcl2
 push ix
 ld ix,0
 add ix,sp
;sound_cmd(4,0);
 ld hl,0; const val
 push hl
 ld hl,4; const val
 ld a,l
 pop hl
 call MZOCmd
 ld a,(this)
L103.lbexit:
 ld sp,ix
 pop ix
 ret
;trace mesg
 call h.unreach
PSGs.step:
;  arg2 arg1 retad oldix lcl1 lcl2
 push ix
 ld ix,0
 add ix,sp
;chs.step();
 ld a,(this)
 push af
 ld ($+5),a
 ld hl,(MZO_FLD.chs)
 ld a,h
 ld (this),a
 ld ($+5),a
 ld hl,(MZO_FLD.step)
 push hl
 ld hl,$+5
 ex (sp),hl
 jp (hl); call hl
  ex (sp),hl
  ld a,h
  pop HL
 ld (this),a
;ch3.mute=chs.mpoint;
 ld ($+5),a
 ld hl,(MZO_FLD.chs)
;hl=tg
 ld l,MZO_FLD.mpoint
  ld (L105.w-2),hl
  ld hl,(0)
L105.w:
 push hl
 ld ($+5),a
 ld hl,(MZO_FLD.ch3)
; stk=val hl=tg
 ld l,MZO_FLD.mute
 pop de
  ld (L106.w-2),hl
  ld (0),de
L106.w:
;ch1.step();
 ld a,(this)
 push af
 ld ($+5),a
 ld hl,(MZO_FLD.ch1)
 ld a,h
 ld (this),a
 ld ($+5),a
 ld hl,(MZO_FLD.step)
 push hl
 ld hl,$+5
 ex (sp),hl
 jp (hl); call hl
  ex (sp),hl
  ld a,h
  pop HL
 ld (this),a
;ch2.step();
 ld a,(this)
 push af
 ld ($+5),a
 ld hl,(MZO_FLD.ch2)
 ld a,h
 ld (this),a
 ld ($+5),a
 ld hl,(MZO_FLD.step)
 push hl
 ld hl,$+5
 ex (sp),hl
 jp (hl); call hl
  ex (sp),hl
  ld a,h
  pop HL
 ld (this),a
;ch3.step();
 ld a,(this)
 push af
 ld ($+5),a
 ld hl,(MZO_FLD.ch3)
 ld a,h
 ld (this),a
 ld ($+5),a
 ld hl,(MZO_FLD.step)
 push hl
 ld hl,$+5
 ex (sp),hl
 jp (hl); call hl
  ex (sp),hl
  ld a,h
  pop HL
 ld (this),a
L104.lbexit:
 ld sp,ix
 pop ix
 ret
;trace mesg
 call h.unreach
PSGs.read16:
;  arg2 arg1 retad oldix lcl1 lcl2
 push ix
 ld ix,0
 add ix,sp
;return return peek(mpoint)+(peek(mpoint+1)<<8);
 ld hl,8; const val
 push hl
 ld l,(ix+argidx+1*2)
 ld h,(ix+argidx+1*2+1)
 ld de,1; const val
 add hl, de
  ld (L108.w-2),hl
  ld hl,(0)
L108.w:
 ld h,0
 pop bc
 ld b,c
L109.loop:
 sla l
 rl h
  djnz L109.loop
 push hl
 ld l,(ix+argidx+1*2)
 ld h,(ix+argidx+1*2+1)
  ld (L110.w-2),hl
  ld hl,(0)
L110.w:
 ld h,0
 pop de
 add hl, de
 jp L107.lbexit
L107.lbexit:
 ld sp,ix
 pop ix
  exx
  pop bc
  inc sp
  inc sp
  push bc
  exx
 ret
initMZOs:
ld hl, (MZO_FLD.gbl_PSGs)
ld a, h
ld hl, PSGs.init
ld ($+5),a
ld (MZO_FLD.init), hl
ld hl, PSGs.initBGM
ld ($+5),a
ld (MZO_FLD.initBGM), hl
ld hl, PSGs.initSE
ld ($+5),a
ld (MZO_FLD.initSE), hl
ld hl, PSGs.stopBGM
ld ($+5),a
ld (MZO_FLD.stopBGM), hl
ld hl, PSGs._step
ld ($+5),a
ld (MZO_FLD._step), hl
ld hl, PSGs.step
ld ($+5),a
ld (MZO_FLD.step), hl
ld hl, PSGs.read16
ld ($+5),a
ld (MZO_FLD.read16), hl
ld hl, (MZO_FLD.gbl_ch1)
ld a, h
ld hl, PSG.init
ld ($+5),a
ld (MZO_FLD.init), hl
ld hl, PSG.stop
ld ($+5),a
ld (MZO_FLD.stop), hl
ld hl, PSG.step
ld ($+5),a
ld (MZO_FLD.step), hl
ld hl, PSG.read16
ld ($+5),a
ld (MZO_FLD.read16), hl
ld hl, (MZO_FLD.gbl_ch2)
ld a, h
ld hl, PSG.init
ld ($+5),a
ld (MZO_FLD.init), hl
ld hl, PSG.stop
ld ($+5),a
ld (MZO_FLD.stop), hl
ld hl, PSG.step
ld ($+5),a
ld (MZO_FLD.step), hl
ld hl, PSG.read16
ld ($+5),a
ld (MZO_FLD.read16), hl
ld hl, (MZO_FLD.gbl_ch3)
ld a, h
ld hl, PSG.init
ld ($+5),a
ld (MZO_FLD.init), hl
ld hl, PSG.stop
ld ($+5),a
ld (MZO_FLD.stop), hl
ld hl, PSG.step
ld ($+5),a
ld (MZO_FLD.step), hl
ld hl, PSG.read16
ld ($+5),a
ld (MZO_FLD.read16), hl
ld hl, (MZO_FLD.gbl_chs)
ld a, h
ld hl, PSG.init
ld ($+5),a
ld (MZO_FLD.init), hl
ld hl, PSG.stop
ld ($+5),a
ld (MZO_FLD.stop), hl
ld hl, PSG.step
ld ($+5),a
ld (MZO_FLD.step), hl
ld hl, PSG.read16
ld ($+5),a
ld (MZO_FLD.read16), hl
ld hl, (MZO_FLD.gbl_PSGs)
invoketg.a MZO_FLD.init
ret
playBGM:
pushthis 0
push hl
ld hl, (MZO_FLD.gbl_PSGs)
invoketg.a MZO_FLD.initBGM
popthis 0
ret
playSE:
pushthis 0
push hl
ld hl, (MZO_FLD.gbl_PSGs)
invoketg.a MZO_FLD.initSE
popthis 0
ret
stopBGM:
pushthis 0
ld hl, (MZO_FLD.gbl_PSGs)
invoketg.a MZO_FLD.stopBGM
popthis 0
ret
step:
pushthis 0
ld hl, (MZO_FLD.gbl_PSGs)
invoketg.a MZO_FLD.step
popthis 0
ret
#endlocal
;!/RAM
` };
}
init();
