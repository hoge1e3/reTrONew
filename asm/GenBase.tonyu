extends Visitor;
includes Buf, Context;
native Tonyu;
native Worker;
native $;
native asmWorker;
let worker;//=asmWorker;//new Worker("https://edit.tonyu.jp/cgi-bin/main.js?"+rnd());
let scriptHost=$config.scriptHost||"https://hoge1e3.github.io";
let workerURL=`${scriptHost}/msx/asmWorker.js`;
//let workerURL="https://edit.tonyu.jp/cgi-bin/asmWorker.js?"+rnd();
$.getScript(workerURL).then \(r) {
    worker=asmWorker;
};

initModule();
x=256;y=20;fillStyle="black";
let IDEPrj=$currentProject.compiler;
text="get Nodes...";
size=20;
let anodes=waitFor(IDEPrj.serializeAnnotatedNodes());
//print(anodes);
let mem=new MemberScan{genasm:this};
waitEvent(mem,"complete");
let lval=false;
let symSeq=1;
let ide=$Boot.getIDE();
let klass, klassSrc;
let method:FuncInfo;
let problems=[];
let globalVars={};
let locals={};
let params={};
let members;
let myMeth=new MyMeth{g:this};
let lbexit="lbexit";

let closestBrk;
//let mainClass;
//debug=true;

printf(`include z_romboot
include z_tnu
include z_map
include z_bool
include z_dac
include z_mus
;include z_mzo


`);
let anode;
\annotation(n) {
    let res=anode[n._id];
    if (!res) {
        return {};
    }
    return res;
}
function isConst(n){
    return annotation(n).constVal;
}
function deable(n) {
    //return false;
    return isConst(n)||
    n.type=="varAccess";
}
let outp=new OutPat;
let outbg=new OutBG;

let hasMain;

\lit2s(l){
    if (typeof l==="string") return l;
    let s=l.text;
    return s.substring(1,s.length-1);
    ;
}
function getMethodPragma(
m:FuncInfo){
    let res={};
    let st=m.stmts.filter \(s){
        return s.type=="exprstmt";
    };
    for(let s of st){
        let es:Exprstmt=s;
        let ex=es.expr;
        if(ex.type=="literal"){
            let s=lit2s(ex);
            res [s]=1;
        }
    }
    return res;
}
for (klass of mem.ks) {
    if (!isROM()) printf("beginram%n");
    let r=mem.objRange(klass);
    text=klass.shortName;
    if (text===$mainClassName) {
        hasMain=true;
        printf("_main:%ntnu.run %s,%d,%d%n",$mainClassName,r[0],r[1]);
    }
    printf("; class_def_start %s%n",klass.shortName);
    printf(";range %d-%d%n",r[0],r[1]);
    mem.header(klass);
    klassSrc=klass.src.tonyu.text();
    let methods=klass.decls.methods;
    anode=(klass.annotation);
    for (let mname, me of methods) {
        method=me;
        genMeth();
        update();
    }
    printf("; class_def_end %s%n",klass.shortName);
    if (!isROM()) printf("endram%n");
    update();
}

\genMeth(){
    //let method:FuncInfo=me;
    let mname=method.name;
    let pragma=getMethodPragma(method);
    let iss=pragma ["static all"];
    text=klass.shortName+"."+mname;
    params={};
    let ln=1;
    for (let i,pa of method.params) {
        params[pa.name.text]=ln;
        ln++;
    }
    locals={};
    ln=1;
    for (let k,v of method.locals.varDecls) {
            // v:VarDecl|Forin|Catch|Token (See definition of SemCtx)
        locals[k]=ln;
        ln++;
    }
    members=mem.getMembers(klass);
    new ConstVisitor().
    collect(klass,method);
    if(iss)staticDef();
    else    normalDef();
}
\normalDef(){
    let mname=method.name;
        
    printf("def %s.%s,%d,%d%{",
    klass.shortName, mname, 
    method.params.length,
    Object.keys(locals).length);
    printf("#local%n");
    for(let s of method.stmts) visit(s);
    printf("%s:%n#endlocal%n",lbexit);
    printf("enddef %s.%s%n", klass.shortName, mname);
    printf("%}");
        
}
\staticDef(){
    let mname=method.name;
    let h=klass.shortName+"."+
    mname;
    printf(";begin of static variables for %s%n",h);
    printf("beginram%n");
    for(let k,v in locals){
        printf("%s.%s:%n",h,k);
        printf("dw 0%n");
    }
    for(let k,v in params){
        printf("%s.%s:%n",h,k);
        printf("dw 0%n");
    }
    printf("endram%n");
    printf(";end of static variables for %s%n",h);
    
    printf("%s:%n",h);
    printf("pop bc%n");
    for (let i,pa of method.params) {
        printf("pop hl%n");
        printf("ld (%s.%s),hl%n",
        h,pa.name.text);
    }
    printf("push bc%n");
    enter {mStatic:h
    } \{
        printf("#local%n");
        for(let s of method.stmts) visit(s);
        printf("%s:%n#endlocal%n",lbexit);
        printf("ret%n");
    };
}
if (!hasMain) throw new Error(`Main class ${$mainClassName} is not subclass of RActor`);
text="Writing assets...";
while(!outp.complete || !outbg.complete) update();
printf(";!ROM%n");
for (let k of Object.keys($MZO.arrays)) {
    printf("%s: %n",globalLabel(k));//dw $+2%n
    dataSection("db", Array.from($MZO.arrays[k]));
}
printf(";!/ROM%n");
printf(`
beginram
;begin of global variables
${Object.keys($config.intArrays||{}).map \(k) {
    let i= $config.intArrays[k];
    if (typeof i==="number") {
        return globalLabel(k)+":\n"+//dw $+2\n"+
        "ds "+(i*2)+", 0";
    } else {
        // 1-d array only currently
        return globalLabel(k)+":\n"+//dw $+2\n"+
        "dw "+i.join(", ");
    }
}.join("\n")};
${Object.keys(globalVars).map \(k){
    if ($MZO.arrays[k]) return "";
    if ($config.consts[k]!=null) return "";
    if ($config.intArrays[k]) return "";
    return globalLabel(k)+":dw 0";
}.join("\n")}
;end of global variables
endram

endusr:
include z_vram
`);
printf("spr.pat:%n");
dataSection("dbx",outp.sprgen);
printf("end.spr.pat:%n");
printf("bg.gen:%n");
dataSection("dbx",outbg.patgen);
printf("end.bg.gen:%n");
printf("bg.col:%n");
dataSection("dbx",outbg.coltbl);
printf("end.bg.col:%n");
printf(`

include z_ram
;!INCLUDE_RAM
end _main`);

if (problems.length) {
    let tx=new HTMLUI{
        content:["div",
        {style:'background: #fee;'},
        ["h2","Problem(s) found"],
        ["ul"].concat(
        problems.map\(p) {
            return ["li",["a",{
                href:"javascript:;",
                onclick: \{
                    ide.jump(p.file, p.row, p.col);  
                }
            },
            p.file.name(),":",p.row,":",p.col," - ",p.mesg
            ]];
        }),
        ["button",{onclick:\{tx.die();}},"Close"]
        ],
        left:10, top: 20, width:300,
        height:400,
    };
    return;
}
/*print(Object.keys(n.decls.fields));
print(n.superclass.fullName);
*/


//msxpen.com/codes/-N8kZzjv3KL0vbHvgiqT";

let cg=new Includer;
let included=cg.gensrc(buf+"").replace(/\r/g,"");
outAsm("before.genrom",included);
included=genROM(included);
outAsm("macro", included);
text="Loading assembler...";
while(!worker) update();
text="Assemble in progress...";

worker.postMessage( included );
let plines=runPromise \(s,err){
    \f(e) {
        worker.removeEventListener("message",f); 
        let data=$JSON.parse(e.data);
        if (data.type==="error") err(new Error(data.message));
        else s(data.result);
    }
    worker.addEventListener("message",f);
};
text="";
let plain=plines.map\(e){return e.body;}.join("\n");
outAsm("plain", plain);
new PostProcess{plines, plain};


\genROM(asm:String) {
    let lines=asm.split("\n");
    //let romEnd;
    //let romIncl=[];
    let ramEnd,ramDepth=0;
    let ramIncl=[];
    for (let i=lines.length-1;i>=0;i--) {
        //print(i, romEnd, ramEnd, lines[i]);
        /*if (lines[i].match(/^;!\/ROM/)) {
            if (ramEnd||romEnd) throw new Error("Include ROM Error at "+i);
            romEnd=i+1;
        }
        if (typeof romEnd==="number" && lines[i].match(/;!ROM/)) {
            romIncl=[...lines.splice(i, romEnd-i), ...romIncl];
            romEnd=null;
        }*/
        
        if (lines[i].match(/^\s*endram\s*$/) || 
        (lines[i].match(/\bendwork\b/) && !lines[i].match(/\bmacro\b/) )) {
            if (ramDepth==0) {
                if (ramEnd) throw new Error("Include end RAM Error at "+i+" / "+ramEnd);
                ramEnd=i+1;
            }
            ramDepth++;
        }
        if (lines[i].match(/^\s*beginram\s*$/) || 
        (lines[i].match(/\bdefwork\b/) && !lines[i].match(/\bmacro\b/) ))  {
            ramDepth--;
            if (ramDepth<0) {
                throw new Error("Depth Include begin RAM Error at "+i+" "+lines[i]);
            }
            if (ramDepth==0) {
                if (!ramEnd) throw new Error("Include begin RAM Error at "+i+" "+lines[i]);
                ramIncl=[...lines.splice(i, ramEnd-i), ...ramIncl];
                ramEnd=null;
            }
        }
    }
    if (ramDepth!=0) {
        throw new Error("Depth is not 0, Include begin RAM Error at "+ramDepth);
    }
    //ramIncl.unshift("ds 8000h-$, 0");
    let res=lines.join("\n")
    //.replace(/;!INCLUDE_ROM/, romIncl.join("\n"))
    .replace(/;!INCLUDE_RAM/, ramIncl.join("\n"));
    return res;
}
//new Button{top:420,text:"to MSXPen",onClick:showDiag,fillStyle:$RSprPat.palette[2]};
\def(n){
    if(!n){
        throw new Error("Visited undefined");
        print(n);
        return;
    }
    print(n.type,":",
    Object.keys(n));
    unsup(n);
}

\dataSection(type, array) {
    let perline=16;
    let fmt="%d";
    if (type[2]=="x") {
        type=type.substring(0,2);
        if (type[1]=="w") {
            fmt="%4x";
        } else {
            fmt="%2x";
        }
    }
    for (let i=0;i<array.length;i++) {
        if (i%perline==0) {
            printf("%s ",type);
        }
        printf(fmt,array[i]);
        if ((i+1)%perline==0 || i==array.length-1) {
            printf("%n");
        } else {
            printf(", ");
        }
    }
    return "";
}

\globalLabel(n:String) {
    return $Boot.globalLabel(n);
    //return `gbl_${n.replace(/\$/g,"")}`;
}
\unsup(n:TNode, mesg:String) {
    mesg=mesg|| "Unsupported syntax";
    let file=klass.src.tonyu;
    let rc=Tonyu.TError.calcRowCol(klassSrc,n.pos);
    let p={file, row:rc.row, col: rc.col, mesg};
    problems.push(p);
    //ide.jump( file, rc.row, rc.col);
    print(p.file.name(),":",p.row,":",p.col," - ",p.mesg);
}
\outAsm(name, content) {
    if ($Navigator.isNW()) {
        file(`asm/${name}.asm`).text(content);
    }
}
\isROM() {
    return $config.ROM===true || 
    ($config.ROM && $config.ROM[klass.shortName]);
}