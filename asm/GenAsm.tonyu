extends GenBase;
let opmap={
    "*":"call mul.a%ngetthis 0%n", 
    "/":"call div.a%ngetthis 0%n",
    "%":"call div.a%nex de,hl%ngetthis 0%n",
    "+":"add hl, de%n",
    "-":"subhl de%n",
};
let comm={"*":1,"+":1,"&":1,"|":1,
    "^":1
}; 

function visit(n){
    if (n is Expression&&!lval&&
    isConst(n)){
        printf("ld hl,%d%n",
        isConst(n));
        return;
    }
    
    return super.visit(n);
}
\extractSrc(n:TNode) {
    return klassSrc.substring(n.pos, n.pos+n.len);
}
\genSym() {
    return "lb"+(symSeq++);
}
\v_parenExpr(n:ParenExpr) {
    visit(n.expr);
}
\v_exprstmt(n:Exprstmt){
    let expr:Expression=n.expr;
    printf(";%s%n", extractSrc(n).replace(/[\r\n]/g,""));
    visit(expr);
}
\v_infix(n:Infix){
    let left:Expression=n.left;
    let op:Token=n.op;
    let right:Expression=n.right;
    switch(op.text){
        case "=":
        assign(n);
        break;
        case "+":case "-":
        case "*":case "/":case "%":
        arith(n);
        break;
        case "==":case "!=":
        case "<=":case ">=":
        case "<":case ">":
        cmp(n);
        break;
        case "+=":case "-=":
        case "*=":case "/=":case "%=":
        arithEq(n);
        break;
        case "&":bitand(left,right);break;
        case "&&":andand(left,right);break;
        case "||":oror(left,right);break;
        case ">>":case "<<":case ">>>":
        shift(n);break;
        default:
        unsup(n,`Unsupported infix operator '${op.text}'`);
    }
}
\shift(n:Infix) {
    let left:Expression=n.left;
    let op:Token=n.op;
    let right:Expression=n.right;
    let ops={">>>":"srlhl",">>":"srahl","<<":"slhl"};
    visit(right);
    printf("push hl%n");
    visit(left);
    printf("pop bc%n");
    printf("ld b,c%n");
    printf("#local%{");
    printf("loop:%n");
    printf("%s 0%n",ops[op.text]);
    printf("djnz loop%n");
    printf("%}#endlocal%n");
}
\andand(left: Expression, right:Expression) {
    let n=genSym();
    visit(left);
    printf("andand %s%n",n);
    visit(right);
    printf("%s:%n",n);
}
\oror(left: Expression, right:Expression) {
    let n=genSym();
    visit(left);
    printf("oror %s%n",n);
    visit(right);
    printf("%s:%n",n);
}

\bitand(left: Expression, right:Expression) {
    visit(left);
    printf("ex de,hl%n");
    visit(right);
    printf("bitand.a 0%n");
    printf("getthis 0%n");
}


\isMemberRef(m:Expression) {
    if (m.type!=="postfix") return null;
    let tgme:Postfix=m;
    if (tgme.op.type!=="member") return null;
    let mem: Member=tgme.op;
    return [tgme.left, mem.name];
}
\v_prefix(n:Prefix) {
    let op:TNode=n.op;
    let right:Expression=n.right;
    visit(right);
    if (op.text==="!") {
        printf("call nothl%n");
    } else if (op.text==="-") {
        printf("call neghl%n");
    } else {
        unsup(n,`Unsupported postfix operator '${op.text}' (${op.type})`);
    }
}
\v_postfix(n:Postfix){
    let left:Expression=n.left;
    let op:TNode=n.op;
    if (!lval) {
        let tgme=isMemberRef(n);
        if (tgme) {
            visit(tgme[0]);
            printf("getfldtg .%s%n",tgme[1]);
            return;
        } else if (op.type==="call") {
            if (left.type==="varAccess") {
                return myMeth.myMeth(left, op);            
            } else {
                let tgme=isMemberRef(left);
                if (tgme) {
                    tgMeth(tgme[0], tgme[1], op);
                    return;
                }
                unsup(n, `Not a member Ref `);
            }
        } else if (op.text==="++"||op.text==="--") {
            visit(left);
            printf(op.text==="++"? "inc hl%n": "dec hl%n");
            enter{lval:true} \{
                visit(left);
            };
            return;
        } else if (op.type==="arrayElem") {
            let ae:ArrayElem=op;
            let subscript:Expression=ae.subscript;
            visit(subscript);
            printf("push hl%n");
            visit(left);
            printf("pop de%n");
            printf("slde 0%n");
            printf("add hl,de%n");
            printf("peekw hl,hl%n");
            return;
        }
    } else {
        let tgme=isMemberRef(n);
        if (tgme) {
            printf("push hl%n");
            enter{lval:false} \{
                visit(tgme[0]);
            };
            printf("setfldtg .%s%n",tgme[1]);
            return;
        } else if (op.type==="arrayElem") {
            printf("push hl%n");
            let ae:ArrayElem=op;
            let subscript:Expression=ae.subscript;
            enter{lval:false}\{
                visit(subscript);
                printf("push hl%n");
                visit(left);
                printf("pop de%n");
            };
            printf("slde 0%n");
            printf("add hl,de%n");
            printf("pop de%n");
            printf("pokew hl,de%n");
            return;
        }
    }
    unsup(n,`Unsupported postfix operator '${op.text}' (${op.type})`);
}
\tgMeth(target: Expression, name:Token, op:Call) {
    if (name.text==="crashTo") {
        unsup(name, "target.crashTo( ) is not supported");
        return;
    }
    printf("pushthis 0%n");
    let args=op.args;
    for(let a of args.reverse()){
        visit(a);
        printf("push hl%n");
    }
    visit(target);
    printf("invoketg.a .%s%n",name);
    printf("popthis 0%n");
    /*
    pushthis 0
   ld hl,(right)
   invoketg.a .push
   popthis 0*/
}
\lit2s(l){
    let s=l.text;
    return s.substring(1,s.length-1);
    ;
}
\str2db(str) {
    printf("db ");
    str=$Boot.str2bin(str);
    for (let i=0;i<str.length;i++) {
        printf("%d",str [i]);
        if (i<str.length-1) printf(", ");
    }
    printf("%n");
    
}
\setLit(l){
    let s=lit2s(l);
    printf("#local%n");
    printf("ld hl,st%n");
    printf("jp nx%n");
    printf("st: ");str2db(s);
    //printf(`st: db "${s}"%n`);
    printf("db 0%n");
    printf("nx:%n");
    printf("#endlocal%n");
}
\cmp(n:Infix){
    let left:Expression=n.left;
    let op:Token=n.op;
    let right:Expression=n.right;
    let ops={
        "==":"eq","!=":"ne",
        "<=":"le",">=":"ge",
        "<":"lt",">":"gt",
    };
    visit(right);
    printf("push hl%n");
    visit(left);
    printf("pop de%n");
    printf("call hl%sde%n",ops[op.text]);
}
\arith(n:Infix){
    let left:Expression=n.left;
    let op:Token=n.op;
    let right:Expression=n.right;
    arith2(left,op.text, right);
}
\arith2(left:Expression, opr:String, right:Expression) {
    visit(right);
    printf("push hl%n");
    visit(left);
    printf("pop de%n");
    if(!opmap [opr]){
        unsup(left,opr);
    }
    printf(opmap[opr]);
}
\arithEq(n:Infix) {
    let left:Expression=n.left;
    let op:Token=n.op;
    let right:Expression=n.right;
    arith2(left, op.text.substring(0,op.text.length-1), right);
    enter{lval:true} \{
        visit(left);
    };
    /*if (left.type!=="varAccess") {
        return unsup(`Only field${op.text}=... is supported `);
    }
    let a=annotation(left);
    switch (a.scopeInfo.type) {
        case "field":

        break;
        case "class":
        unsup(n,`Cannot assign to class '${name}'.`);
        break;
        default:
        unsup(n,`${name}: Unsupported variable type '${a.scopeInfo.type}'`);
    }

    
    let s=`
        macro getfld, n
        local ad
        ld (ad-1),a
        ld hl,(n)
        ad:
        endm

        macro setfld, n
        local ad
        ld (ad-1),a
        ld (n),hl
        ad:
        endm
        `;*/
}
\assign(n:Infix){
    let left:Expression=n.left;
    let op:Token=n.op;
    let right:Expression=n.right;
    visit(right);
    enter{lval:true} \{
        visit(left);
    };
}
\v_reservedConst(n:Token) {
    if (n.text==="true" || n.text==="false") {
        printf("ld hl,%s%n",n.text);
    } else if (n.text==="this") {
        printf("ld h,a%n");
        printf("ld l,0%n");
        return;
    } else if (n.text==="null") {
        printf("ld hl,null%n");
        return;
    } else {
        unsup(n,`Unsupported reserved word '${n.text}'.`);
    }
}
\v_number(n:Token){
    printf("ld hl,%d%n",n.text-0);
}
\v_varAccess(n:VarAccess){
    let name:Token=n.name;
    let a=annotation(n);
    switch (a.scopeInfo.type) {
        case "field":
        case "method":
        if (lval) {
            printf("setfld .%s%n",name);
        } else{
            printf("getfld .%s%n",name);
        }
        break;
        case "class":
        if (lval) {
            unsup(n,`Cannot assign to class '${name}'.`);
        } else{
            printf("ld hl,%s%n",name);
        }
        break;
        case "global":
        globalVars[name.text]=1;
        let isc=$config.consts[name.text];
        if (lval) {
            if (isc!=null){
                return unsup(name,"Cannot assign to constant"); 
            }
            printf("ld (%s),hl%n",globalLabel(name.text));
        } else {
            if (isc!=null){
                printf("ld hl,%d%n",isc);
            } else {
                printf("ld hl,(%s)%n",globalLabel(name.text));
            }
        }
        break;
        case "local":
        if (!locals[name.text]){
            unsup(name,`Undefined local variable ${name.text}`);
            return;
        }
        if (lval) {
            printf ("setlcl %d%n",locals[name.text]);
        } else {
            printf ("getlcl %d%n",locals[name.text]);
        }
        break;
        case "param":
        if (!params[name.text]){
            unsup(name,`Undefined paramter ${name.text}`);
        }
        if (lval) {
            printf ("setarg %d%n",params[name.text]);
        } else {
            printf ("getarg %d%n",params[name.text]);
        }
        break;
        default:
        unsup(n,`${name.text}: Unsupported variable type '${a.scopeInfo.type}'`);
    }
}

\v_newExpr(n:NewExpr){
    let klass:VarAccess=n.klass;
    let params:Call?=n.params;
    if (!params || (params.args.length==1 && params.args[0].type=="objlit")) {
        let alen=0;
        if (params) {
            let objlit:Objlit=params.args[0];
            let elems:JsonElem[]=objlit.elems;
            for (let elem of elems) {
                if (elem.value) {
                    visit(elem.value);
                } else {
                    if (this.params[elem.key.text]) {
                        printf ("getarg %d%n",this.params[elem.key.text]);
                    } else if (locals[elem.key.text] ) {
                        printf ("getlcl %d%n",locals[elem.key.text]);
                    } else {
                        printf("getfld .%s%n",elem.key);
                    }
                }
                printf("new.arg .%s%n",elem.key);
            }
            alen=elems.length;
        }
        let resKlass=isClassConst(klass);
        if (!resKlass) {
            unsup(klass , `Only class name is allowed`);
        }
        let range=mem.objRange(resKlass);
        printf("new %s,%d,%s,%s%n",
        klass.name, alen,
        range[0], range[1]);
        //rangeToAd(range[0]),rangeToAd(range[1]));
        return;
    }
    unsup(n,`'new ${klass.name}' can be followed by only {key:value...}`);
}


//Statements
\v_program(n:Program){
    let ext:Extends?=n.ext;
    let incl:Includes?=n.incl;
    let stmts:Stmt[]=n.stmts;
    for (let s of stmts){
        visit(s);
    }
    printf("ret%n");
}
\v_compound(n:Compound) {
    for (let s of n.stmts) {
        visit(s);
    }
}
\v_while(n:While){
    let cond:Expression=n.cond;
    let loop:Stmt=n.loop;
    let sh=genSym();
    let se=genSym();
    printf("%s:%n",sh);
    visit(cond);
    printf("jpf %s%n",se);
    enter{closestBrk:se} \{
        visit(loop);
    };
    printf("jp %s%n",sh);
    printf("%s:%n",se);
}
\v_return(n:Return) {
    if (n.value) {
        visit(n.value);
    }
    printf("jp %s%n",lbexit);
}
\v_break(n) {
    if (!closestBrk) {
        unsup(n,"break outside loop ")   ;
    }
    if (closestBrk==="BREAK") {
        printf("break%n");
    } else {
        printf("jp %s%n",closestBrk);
    }
}
\v_for(n:For){
    let inFor:ForHead=n.inFor;
    let loop:Stmt=n.loop;
    if (inFor.type==="normalFor") {
        let h:NormalFor=inFor;
        let init:Stmt=h.init;
        let cond:Expression?=h.cond;
        let next:Expression?=h.next;
        let sh=genSym();
        let se=genSym();
        visit(init);
        printf("%s:%n",sh);
        visit(cond);
        printf("jpf %s%n",se);
        enter{closestBrk: se} \{
            visit(loop);
        };
        visit(next);
        printf("jp %s%n",sh);
        printf("%s:%n",se);
    } else {
        let h:Forin=inFor;
        let isVar:Token?=h.isVar;
        let vars:Token[]=h.vars;
        let inof:Token=h.inof;
        let set:Expression=h.set;
        let klass=isAll(set);
        if (!klass) {
            unsup(set,"only 'for (e of all(Class))' is allowed ");
            return;
        }
        //foreach.a, Class,st,en,nx
        let range=mem.objRange(klass);
        let nx=genSym();
        printf("foreach.a %s, %d, %d, %s%{",klass.shortName,range[0],range[1],nx);
        let va=annotation(vars[0]);
        //print (va);
        if (va.scopeInfo.type==="field") {
            printf("setfld .%s%n", vars[0].text);
        } else if (va.scopeInfo.type==="local") {
            printf("setlcl %d%n",locals[vars[0].text]);
        } else if (va.scopeInfo.type==="global") {
            printf("ld (%s),hl%n", globalLabel(vars[0].text));
        } else {
            unsup(vars[0],"only field/local/global supports");
        }
        enter{closestBrk:"BREAK"} \{
            visit(loop);
        };
        printf("continue%n");
        printf("%}%s:%n",nx);
        printf("getthis 0%n");
    }
}
\isAll(set:Expression) {
    if (set.type!=="postfix") return false;
    let p:Postfix=set;
    if (p.op.type!=="call") return false;
    let c:Call=p.op;
    if (p.left.type!=="varAccess") return false;
    let a:VarAccess=p.left;
    if (a.name.text!=="all") return false;
    if (c.args.length!==1) return false;
    let k=c.args[0];
    return k.type==="varAccess" && isClassConst(k);
}
\v_if(n:If){
    let cond:Expression=n.cond;
    let then:Stmt=n.then;
    let _else:Stmt?=n._else;
    let send=genSym();
    visit(cond);
    if (_else) {
        let sels=genSym();
        printf("jpf %s%n",sels);
        visit(then);
        printf("jp %s%n",send);
        printf("%s:%n",sels);
        visit(_else);
        printf("%s:%n",send);
    } else {
        printf("jpf %s%n",send);
        visit(then);
        printf("%s:%n",send);
    }
}


\v_varDecl(n:VarDecl){
    let name:Token=n.name;
    let typeDecl:TypeDecl?=n.typeDecl;
    let value:Expression?=n.value;
    let a=annotation(n);
    /*if (!a.varInMain) {
        unsup(n,"Local Variables are not yet supported.");
        return;
    }*/
    if (!value) return;
    visit(value);
    if (a.varInMain) {
        printf("setfld .%s%n",name);
    } else {
        if (!locals[name.text]) {
            unsup(n,`Undefined variable: ${name.text}`);
            return;
        }
        printf("setlcl %s%n",locals[name.text]);
    }
}
\v_varsDecl(n:VarsDecl){
    let decls:VarDecl[]=n.decls;
    if (n.declPrefix.text!=="var") {
        unsup(n,"let or const are not supported.");
    }
    for(let d of decls){
        visit(d);
    }
}
/*
\rangeToAd(r) {
    return `th.start+${r}*th.size`;
}*/
\isClassConst(klass:VarAccess) {
    let a=annotation(klass);
    if (a.scopeInfo.type!=="class") {
        return null;
    }
    return a.scopeInfo.info;
}
super.main();