extends TObject;
//includes FileMod;

//let base: GenBase;

\genROM(asm:String) {
    let lines=asm.split("\n");
    let romEnd;
    let romIncl=[];
    let ramEnd;
    let ramIncl=[];
    for (let i=lines.length-1;i>=0;i--) {
        //print(i, romEnd, ramEnd, lines[i]);
        /*if (lines[i].match(/^;!\/ROM/)) {
            if (ramEnd||romEnd) throw new Error("Include ROM Error at "+i);
            romEnd=i+1;
        }
        if (typeof romEnd==="number" && lines[i].match(/;!ROM/)) {
            romIncl=[...lines.splice(i, romEnd-i), ...romIncl];
            romEnd=null;
        }*/
        
        if (lines[i].match(/^\s*endram\s*$/) || 
        (lines[i].match(/\bendwork\b/) && !lines[i].match(/\bmacro\b/) )) {
            if (romEnd||ramEnd) throw new Error("Include end RAM Error at "+i+" / "+ramEnd);
            ramEnd=i+1;
        }
        if (lines[i].match(/^\s*ram\s*$/) || 
        (lines[i].match(/\bdefwork\b/) && !lines[i].match(/\bmacro\b/) ))  {
            if (!ramEnd) throw new Error("Include begin RAM Error at "+i+" "+lines[i]);
            ramIncl=[...lines.splice(i, ramEnd-i), ...ramIncl];
            ramEnd=null;
        }
    }
    //ramIncl.unshift("ds 8000h-$, 0");
    let res=lines.join("\n")
    .replace(/;!INCLUDE_ROM/, romIncl.join("\n"))
    .replace(/;!INCLUDE_RAM/, ramIncl.join("\n"));
    return res;
}
