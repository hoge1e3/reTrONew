extends Actor;
native Uint8Array;

let plines,plain;
let expButtons=[];
//print("buf="+buf);
let url_pen="https://msxpen.com/codes/-NIC-SEGqU36eQRu6p-E";
let url_ws="https://8bitworkshop.com/v3.10.0/?platform=msx";
let export_platforms={
    msxpen:["ul",
    ["li",
    "Open ",
    ["a",{target:"pen",href:url_pen},
    "this MSXpen page "],
    "."],
    ["li","Paste the copied code",
    " to 'Asm' tab."]],
    "8bitws":["ul",
    ["li",
    "Open ",
    ["a",{target:"ws",href:url_ws},
    "the 8bitworkshop ide"],
    "."],
    ["li","Paste the copied code"]],
};
//msxpen.com/codes/-N8kjRrkOlaH4vlLV7MY";

switch ($config.postprocess.target) {
    case "rom":
    dlROM();break;
    case "msxpen":
    case "8bitws":
    showDiag{platform:$config.postprocess.target};
    break;
    default:
    showExportButtons();
}
\showExportButtons(layout) {
    layout=layout||{};
    let top=layout.top, height=layout.height;
    if (typeof top!=="number") top=420;
    if (typeof height!=="number") height=25;
    expButtons=[];
    let sideMargin=24;
    let width=$screenWidth/2-sideMargin;
    let b;
    b=new Button{top,left:sideMargin, width,height,
        text:"to MSXPen",platform:"msxpen",padding:1,
        onClick:showDiag,fillStyle:$RSprPat.palette[4]
    };
    expButtons.push(b);
    b=new Button{top,left:$screenWidth/2, width,height,
        text:"to 8bitworkshop",platform:"8bitws",padding:1,
        onClick:showDiag,fillStyle:$RSprPat.palette[9]
    };
    expButtons.push(b);
    b=new Button{top:top+height,left:sideMargin, width,height,
        text:"Download ROM",padding:1,
        onClick:dlROM,fillStyle:$RSprPat.palette[13]
    };
    expButtons.push(b);
}
\hideExportButtons() {
    for (let b of expButtons) b.die();
    expButtons=[];
}
\toggleExportButtons(layout) {
    if (expButtons.length) hideExportButtons();
    else showExportButtons(layout);
}

\showDiag(b) {
    //msxpen.com/codes/-N8fnpcspSXEqEJ4lOeO";
    
    let tx;
    if (!$config.postprocess.noDialog) tx=new HTMLUI{
        content:["div",
        {style:'background: #eee;'},
        ["h2","Code copied!"],
        export_platforms[b.platform],/*
        ["ul",
        ["li",
        "Open ",
        ["a",{target:"pen",href:url_pen},
        "this MSXpen page "],
        "."],
        ["li","Paste the copied code",
        " to 'Asm' tab."]],*/
        ["textarea",{rows:"10", cols:"30",name:"val"},
        "test\ndesu"],
        ["button",{onclick:\{tx.die();}},"Close"]
        ],
        left:10, top: 20, width:300,
        height:400,
    };
    let generatedAsm=plain;
    /*if (b.platform==="8bitws") {
        generatedAsm=new GenROM{base:this}.gen(plain);
    } else {
        //let cg=new Includer;
        generatedAsm=plain;
    }*/
    if (tx) {
        tx.setValue("val", generatedAsm);
        tx.copyToClipboard("val");
    }
    if (typeof $config.postprocess.onExport==="function") {
        $config.postprocess.onExport{genAsm:this, asm:generatedAsm};
    }
}
\dlROM() {
    //let romAsm=new GenROM{base:this}.gen(plain);
    let bins=[], labels={}, romlbls={};
    for (let line of plines) {
        if (line.label) {
            labels[line.label]=line.address;
            if (line.address>=0x4000 && line.address<0x8000) {
                //print("LB",line.label, line.address.toString(16));
                romlbls[line.label]=line.address;
            }
        }
        for (let e of line.bin) bins.push(e);
    }
    while(bins.length<0x8000) bins.push(0);
    // Check mnemonics within ROM
    /*for (let line of plines) {
        line.body.replace(/[\w\.]+/g) \(r) {
            if (romlbls[r]) {
                print(line.body);
            }
        }   ;
    }*/

        //print(bins);
    let romFile=file($config.postprocess.romFileName || "output.rom");
    romFile.setBytes(new Uint8Array(bins));
    if (typeof $config.postprocess.onExport==="function") {
        $config.postprocess.onExport{genAsm:this, romFile, labels};
    } else {
        romFile.download();
    }
}