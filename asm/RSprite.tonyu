extends Actor;
let sprpat;
let p,c;
let dotAlign=1;
\spr_scale {
    return $config["spr.scale"];
}
\new(params) {
    super(params);
    if(!$RSprPat) $RSprPat=new RSprPat;
    sprpat=sprpat||$RSprPat;
    dotAlign=dotAlign||1;
    width=$crashTo_size;
    height=$crashTo_size;
    //print(width,height);
    //scaleX=2;
}
\setPalette(n,c){
    sprpat.palette [n-1]=c;
}
\map_setAt(x,y,p) {
    $map.set( x>>(3+spr_scale) , y>>(3+spr_scale), $pat_font_orig+p);
}
\map_getAt(x,y) {
    return $map.get( x>>(3+spr_scale) , y>>(3+spr_scale))-$pat_font_orig;
}
\map_set(x,y,p) {
    $map.set( x , y, $pat_font_orig+p);
}
\map_get(x,y) {
    return $map.get( x , y)-$pat_font_orig;
}
\div(x,y) {
    return floor(x/y);
}

\locate(x,y) {
    $map.curx=x;
    $map.cury=y;
}
\print(){
    let a=new ArgParser(arguments);
    let s=a.toArray().map\(e){
        return (typeof e=="number"&& e>=0 ? " "+e:e);
    }.join("");
    s=$Boot.str2bin(s);
    for (let i=0;i<s.length;i++) {
        let c=s [i];
        map_set($map.curx, $map.cury, c);
        $map.curx++;
        if ($map.curx>=$map.col) {
            $map.curx=0;
            $map.cury=($map.cury+1)%$map.row;
        }
    }
}
\freeStack() {
    return 200;
}
\sound_vol(ch, vol) {
    $PSG[ch].set{vol:vol*(128/15)};   
}
\sound_scale(ch, scale) {
    $PSG[ch].set{scale};   
}
\setInterval(f){
    $Boot.onInter=f;
}
\peek(ad) {
    return $mapper.peek(ad);
}
\poke(ad,v) {
    return $mapper.poke(ad,v);
}
\loadPage(Class) {
    all(RSprite).die();
    die();
    new Class;
}
\asm_label(n){
    return 0;
}
\keycode(c) {
    return c;
}
\getkey(n){
    let r=super.getkey(n);
    if(!$pad)
    return r;
    switch(n){
        case "space":
            
        return $pad.getButton(1);
        case "left":
        return $pad.getLeft();
        case "right":
        return $pad.getRight();
        case "up":
        return $pad.getUp();
        case "down":
        return $pad.getDown();
    }
    return r;
}
\stickX(n, v) {
    if (n==0) {
        return getkey("left")?-v:getkey("right")?v:0;
    }
    if (n==3) {
        return getkey("a")?-v:getkey("d")?v:0;
    }
    return 0;
}
\stickY(n, v) {
    if (n==0) {
        return getkey("up")?-v:getkey("down")?v:0;
    }
    if (n==3) {
        return getkey("w")?-v:getkey("s")?v:0;
    }
    return 0;
}

\draw(ctx){
    let pa:Panel=sprpat.get(p,c);
    if(pa==null)return;
    ctx.save();
    let sx=x,sy=y;
    x=floor(x/dotAlign)*dotAlign>> spr_scale;
    y=floor(y/dotAlign)*dotAlign>> spr_scale;
    performTransform(ctx);
    /*ctx.drawImage(pa.image,
    floor(x-pa.width),floor(y-pa.height)
    );*/
    ctx.drawImage(pa.image,
    -floor(pa.width/2),-floor(pa.height/2)
    );
    x=sx;y=sy;
    ctx.restore();
}
\defaultLayer{
    return $MLayer;
}
